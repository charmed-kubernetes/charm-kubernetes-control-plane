#
# Copyright 2023 Canonical, Ltd.
#
import os
import shutil
import sys
from urllib.request import urlopen

import yaml

# NOTE: pick a kube-prometheus version that supports the Kubernetes version we deploy
VERSION = "v0.13.0"
SOURCE = (
    f"https://raw.githubusercontent.com/prometheus-operator/kube-prometheus/{VERSION}/manifests"
)
# COS handles node and monitoring components alert rules, so skip them
FILES = [
    # "alertmanager-prometheusRule.yaml",
    "kubePrometheus-prometheusRule.yaml",
    "kubeStateMetrics-prometheusRule.yaml",
    "kubernetesControlPlane-prometheusRule.yaml",
    # "nodeExporter-prometheusRule.yaml",
    # "prometheus-prometheusRule.yaml",
    # "prometheusOperator-prometheusRule.yaml",
]
DIR = "src/prometheus_alert_rules"

# list of alerting rules (group_name, record_rule) to skip.
# NOTE(neoaggelos): This is a temporary hack because the rules in this list create duplicate
#                   records. They are unused by the dashboards, so they are safe to drop
HACK_DROP_RECORDS = [
    ("kube-apiserver-availability.rules", "code_verb:apiserver_request_total:increase1h")
]

shutil.rmtree(DIR, ignore_errors=True)
os.mkdir(DIR)

for file in FILES:
    source = f"{SOURCE}/{file}"
    data = [
        "---",
        f"# Automatically generated by {sys.argv}",
        f"# Source: {source}",
    ]
    contents = urlopen(source).read().decode().strip()
    alert_rules = yaml.safe_load(contents)["spec"]

    for group in alert_rules["groups"]:
        group["rules"] = [
            rule
            for rule in group["rules"]
            if (group["name"], rule.get("record")) not in HACK_DROP_RECORDS
        ]

    data += [yaml.safe_dump(alert_rules)]

    with open(f"src/prometheus_alert_rules/{file}", "w") as fout:
        fout.write("\n".join(data))
